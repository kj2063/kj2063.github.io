{"version":3,"file":"component---src-pages-using-ssr-tsx-9ac3b1ff5d520b728bc4.js","mappings":"6JAiDA,IAlCYA,IAAiD,IAADC,EAAAC,EAAA,IAA/C,YAAEC,EAAW,MAAEC,EAAK,SAAEC,GAAoBL,EACrD,MAAM,KAAEM,IAASC,EAAAA,EAAAA,gBAAe,YAc1BC,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAgC,QAApBT,EAAGK,EAAKG,oBAAY,IAAAR,OAAA,EAAjBA,EAAmBG,MAExC,OACEO,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQD,EAAkBN,EAAK,MAAMM,EAAiBN,GACtDO,EAAAA,cAAA,QAAMC,KAAK,cAAcC,QAASL,IAClCG,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAAST,IACnCO,EAAAA,cAAA,QAAMG,SAAS,iBAAiBD,QAASL,IACzCG,EAAAA,cAAA,QAAMG,SAAS,UAAUD,QAAQ,YACjCF,EAAAA,cAAA,QAAMC,KAAK,eAAeC,QAAQ,YAClCF,EAAAA,cAAA,QAAMC,KAAK,kBAAkBC,SAA0B,QAAjBX,EAAAI,EAAKG,oBAAY,IAAAP,OAAA,EAAjBA,EAAmBa,SAAU,KACnEJ,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAAST,IACpCO,EAAAA,cAAA,QAAMC,KAAK,sBAAsBC,QAASL,IACzCH,EACA,C,mGCzCP,MA+BaW,EAAOA,IAAML,EAAAA,cAACM,EAAAA,EAAG,CAACb,MAAM,cAErC,UAjCiBJ,IAAA,IAAC,WAAEkB,GAAkBlB,EAAA,OACpCW,EAAAA,cAAA,WACEA,EAAAA,cAAA,UAAI,eAED,IACDA,EAAAA,cAAA,SAAG,yBAELA,EAAAA,cAAA,SAAG,mHAGA,IACDA,EAAAA,cAAA,YAAM,yCAA4C,KAGpDA,EAAAA,cAAA,OACEQ,MAAO,CAAEC,MAAO,QAASC,aAAc,wBACvCC,IAAI,eACJC,IAAKL,EAAWM,UAElBb,EAAAA,cAAA,SAAG,kCAEA,IACDA,EAAAA,cAAA,KAAGc,KAAK,oFAAmF,6CAEvF,KAGNd,EAAAA,cAACe,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACT,C","sources":["webpack://gatsby-starter-default/./src/components/seo.tsx","webpack://gatsby-starter-default/./src/pages/using-ssr.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ntype SeoType = {\n  description?: string;\n  title: string;\n  children?: React.ReactNode;\n}\n\nconst Seo = ({ description, title, children } : SeoType) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ''} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  );\n};\n\nexport default Seo;\n","import * as React from 'react';\nimport { Link } from 'gatsby';\nimport Seo from '@src/components/seo';\n\nconst UsingSSR = ({ serverData } : any) => (\n  <div>\n    <h1>\n      This page is\n      {' '}\n      <b>rendered server-side</b>\n    </h1>\n    <p>\n      This page is rendered server side every time the page is requested.\n      Reload it to see a(nother) random photo from\n      {' '}\n      <code>dog.ceo/api/breed/shiba/images/random</code>\n      :\n    </p>\n    <img\n      style={{ width: '320px', borderRadius: 'var(--border-radius)' }}\n      alt=\"A random dog\"\n      src={serverData.message}\n    />\n    <p>\n      To learn more, head over to our\n      {' '}\n      <a href=\"https://www.gatsbyjs.com/docs/reference/rendering-options/server-side-rendering/\">\n        documentation about Server Side Rendering\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </div>\n);\n\nexport const Head = () => <Seo title=\"Using SSR\" />;\n\nexport default UsingSSR;\n\nexport async function getServerData() {\n  try {\n    const res = await fetch('https://dog.ceo/api/breed/shiba/images/random');\n    if (!res.ok) {\n      throw new Error('Response failed');\n    }\n    return {\n      props: await res.json(),\n    };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  } catch (error) {\n    return {\n      status: 500,\n      headers: {},\n      props: {},\n    };\n  }\n}\n"],"names":["_ref","_site$siteMetadata","_site$siteMetadata2","description","title","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","React","name","content","property","author","Head","Seo","serverData","style","width","borderRadius","alt","src","message","href","Link","to"],"sourceRoot":""}