{"version":3,"file":"component---src-pages-blog-tsx-85f534e3c8fd6e80a0fc.js","mappings":"6JAiDA,IAlCYA,IAAiD,IAAD,QAA/C,YAAEC,EAAW,MAAEC,EAAK,SAAEC,GAAoB,EACrD,MAAM,KAAEC,IAASC,EAAAA,EAAAA,gBAAe,YAc1BC,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAgC,QAApB,EAAGJ,EAAKG,oBAAY,aAAjBE,EAAmBP,MAExC,OACEQ,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAQF,EAAkBN,EAAK,MAAMM,EAAiBN,GACtDQ,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,cAAcC,QAASN,IAClCI,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,WAAWD,QAASV,IACnCQ,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,iBAAiBD,QAASN,IACzCI,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,UAAUD,QAAQ,YACjCF,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,eAAeC,QAAQ,YAClCF,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,kBAAkBC,SAA0B,QAAjB,EAAAR,EAAKG,oBAAY,aAAjBO,EAAmBC,SAAM,KAC/DL,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,gBAAgBC,QAASV,IACpCQ,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,sBAAsBC,QAASN,IACzCH,EACA,C,qHCxBP,MAgDaa,EAAO,IAAMN,EAAAA,cAACO,EAAAA,EAAG,CAACf,MAAM,SAErC,UAlDcgB,IAEV,MAEMC,EAFkBD,EAAQE,KAAKC,kBAAkBC,MAEjBC,KAAKC,IACvC,MAAMC,EAAWD,EAAIE,KAAKC,YAC1B,OACIjB,EAAAA,cAAAA,KAAAA,CAAIkB,UAAW,UAAWC,IAAKJ,EAASK,MACpCpB,EAAAA,cAAAA,KAAAA,CAAIkB,UAAW,mBAAoBG,IAAON,EAASO,MAAMC,OAAO,eAChEvB,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAACwB,EAAAA,KAAI,CAACN,UAAW,aAAcO,GAAIV,EAASK,MAAOL,EAASvB,QAE/D,IAIb,OACIQ,EAAAA,cAAAA,MAAAA,KACIA,EAAAA,cAAAA,KAAAA,CAAIkB,UAAW,aAAY,QAG3BlB,EAAAA,cAAAA,QAAAA,CAAOkB,UAAU,aACblB,EAAAA,cAAAA,QAAAA,KACKS,IAGP,C","sources":["webpack://gatsby-starter-default/./src/components/seo.tsx","webpack://gatsby-starter-default/./src/pages/blog.tsx"],"sourcesContent":["/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\nimport React from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\ntype SeoType = {\r\n  description?: string;\r\n  title: string;\r\n  children?: React.Component;\r\n}\r\n\r\nconst Seo = ({ description, title, children } : SeoType) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import * as React from \"react\"\r\nimport \"@src/styles/index.css\"\r\nimport \"@src/styles/blog.css\"\r\nimport {graphql, Link} from \"gatsby\";\r\nimport moment from \"moment\";\r\nimport Seo from \"@src/components/seo\";\r\n\r\ntype BlogFrontmatterType = {\r\n    date : string;\r\n    slug : string;\r\n    title : string;\r\n}\r\n\r\ntype BlogFrontmatterNodeType = {\r\n    frontmatter: BlogFrontmatterType;\r\n}\r\n\r\ntype BlogPostNodeType = {\r\n    node: BlogFrontmatterNodeType;\r\n}\r\n\r\nconst blog = (graphql : any) => {\r\n\r\n    const blogPostNodeArr = graphql.data.allMarkdownRemark.edges;\r\n\r\n    const postArrRender = blogPostNodeArr.map((obj:BlogPostNodeType) => {\r\n        const postData = obj.node.frontmatter;\r\n        return (\r\n            <tr className={\"postDiv\"} key={postData.slug}>\r\n                <td className={\"dateStyle mgl30\"}>{moment(postData.date).format(\"YYYY.MM.DD\")}</td>\r\n                <td>\r\n                    <Link className={\"titleStyle\"} to={postData.slug}>{postData.title}</Link>\r\n                </td>\r\n            </tr>\r\n        )\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            <h2 className={\"mainColor\"}>\r\n                Blog\r\n            </h2>\r\n            <table className=\"blogTable\">\r\n                <tbody>\r\n                    {postArrRender}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const query = graphql`\r\n  query {\r\n      allMarkdownRemark (sort: {fields:frontmatter___date,order:DESC}){ \r\n        edges {\r\n          node {\r\n            html\r\n            frontmatter{\r\n                title\r\n                slug\r\n                date\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const Head = () => <Seo title=\"Blog\" />\r\n\r\nexport default blog;"],"names":["_ref","description","title","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_site$siteMetadata","React","name","content","property","_site$siteMetadata2","author","Head","Seo","graphql","postArrRender","data","allMarkdownRemark","edges","map","obj","postData","node","frontmatter","className","key","slug","moment","date","format","Link","to"],"sourceRoot":""}