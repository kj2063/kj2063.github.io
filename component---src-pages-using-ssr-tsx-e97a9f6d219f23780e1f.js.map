{"version":3,"file":"component---src-pages-using-ssr-tsx-e97a9f6d219f23780e1f.js","mappings":"4JAiDA,IAlCYA,IAAiD,IAAD,QAA/C,YAAEC,EAAW,MAAEC,EAAK,SAAEC,GAAoB,EACrD,MAAM,KAAEC,IAASC,EAAAA,EAAAA,gBAAe,YAc1BC,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAgC,QAApB,EAAGJ,EAAKG,oBAAY,aAAjBE,EAAmBP,MAExC,OACEQ,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAQF,EAAkBN,EAAK,MAAMM,EAAiBN,GACtDQ,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,cAAcC,QAASN,IAClCI,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,WAAWD,QAASV,IACnCQ,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,iBAAiBD,QAASN,IACzCI,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,UAAUD,QAAQ,YACjCF,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,eAAeC,QAAQ,YAClCF,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,kBAAkBC,SAA0B,QAAjB,EAAAR,EAAKG,oBAAY,aAAjBO,EAAmBC,SAAM,KAC/DL,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,gBAAgBC,QAASV,IACpCQ,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,sBAAsBC,QAASN,IACzCH,EACA,C,kGCxCP,MA4Baa,EAAO,IAAMN,EAAAA,cAACO,EAAAA,EAAG,CAACf,MAAM,cAErC,UA9BiBF,IAA0B,IAAzB,WAAEkB,GAAkB,EACpC,OACIR,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,KAAAA,KAAAA,gBACeA,EAAAA,cAAAA,IAAAA,KAAAA,yBAEfA,EAAAA,cAAAA,IAAAA,KAAAA,mHAE+C,IAC7CA,EAAAA,cAAAA,OAAAA,KAAAA,yCAAkD,KAEpDA,EAAAA,cAAAA,MAAAA,CACES,MAAO,CAAEC,MAAO,QAASC,aAAc,wBACvCC,IAAI,eACJC,IAAKL,EAAWM,UAElBd,EAAAA,cAAAA,IAAAA,KAAAA,kCACkC,IAChCA,EAAAA,cAAAA,IAAAA,CAAGe,KAAK,oFAAkF,6CAEtF,KAGNf,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAG,KAAG,2BACR,C","sources":["webpack://gatsby-starter-default/./src/components/seo.tsx","webpack://gatsby-starter-default/./src/pages/using-ssr.tsx"],"sourcesContent":["/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\nimport React from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\ntype SeoType = {\r\n  description?: string;\r\n  title: string;\r\n  children?: React.Component;\r\n}\r\n\r\nconst Seo = ({ description, title, children } : SeoType) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nimport Seo from \"@src/components/seo\"\r\n\r\nconst UsingSSR = ({ serverData } : any) => {\r\n  return (\r\n      <div>\r\n        <h1>\r\n          This page is <b>rendered server-side</b>\r\n        </h1>\r\n        <p>\r\n          This page is rendered server side every time the page is requested.\r\n          Reload it to see a(nother) random photo from{\" \"}\r\n          <code>dog.ceo/api/breed/shiba/images/random</code>:\r\n        </p>\r\n        <img\r\n          style={{ width: \"320px\", borderRadius: \"var(--border-radius)\" }}\r\n          alt=\"A random dog\"\r\n          src={serverData.message}\r\n        />\r\n        <p>\r\n          To learn more, head over to our{\" \"}\r\n          <a href=\"https://www.gatsbyjs.com/docs/reference/rendering-options/server-side-rendering/\">\r\n            documentation about Server Side Rendering\r\n          </a>\r\n          .\r\n        </p>\r\n        <Link to=\"/\">Go back to the homepage</Link>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport const Head = () => <Seo title=\"Using SSR\" />\r\n\r\nexport default UsingSSR\r\n\r\nexport async function getServerData() {\r\n  try {\r\n    const res = await fetch(`https://dog.ceo/api/breed/shiba/images/random`)\r\n    if (!res.ok) {\r\n      throw new Error(`Response failed`)\r\n    }\r\n    return {\r\n      props: await res.json(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      status: 500,\r\n      headers: {},\r\n      props: {},\r\n    }\r\n  }\r\n}\r\n"],"names":["_ref","description","title","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_site$siteMetadata","React","name","content","property","_site$siteMetadata2","author","Head","Seo","serverData","style","width","borderRadius","alt","src","message","href","Link","to"],"sourceRoot":""}